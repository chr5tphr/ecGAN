tag: 'root'
dict:
    root_dir: '/home/chrstphr/projects/ecGAN/result'
    exp_dir: 'cgan_pos' #'cgan'

    device: 'gpu'
    device_id: 3
    debug: True

    init: False

    batch_size: 64
    save_freq: 5

    feature_matching: False
    semi_supervised: True
    fuzzy_labels: False
    #clip_penalty: 0.001

    data:
        args: []
        kwargs:
            bbox: [-1.,1.]
            labels: NULL
        bbox: [-1.,1.]

    net_file: '${root_dir}/${exp_dir}/net.py'
    nets:
        gen:
            param: '${root_dir}/${exp_dir}/${data.func}/params/${nets.gen.type}.${nets.gen.name}.${nets.gen.epoch}.params'
            save: '${root_dir}/${exp_dir}/${data.func}/params/${nets.gen.type}.${nets.gen.name}.${epoch}.params'
        dis:
            param: '${root_dir}/${exp_dir}/${data.func}/params/${nets.dis.type}.${nets.dis.name}.${nets.dis.epoch}.params'
            save: '${root_dir}/${exp_dir}/${data.func}/params/${nets.dis.type}.${nets.dis.name}.${epoch}.params'
        cls:
            param: '${root_dir}/${exp_dir}/${data.func}/params/${nets.cls.type}.${nets.cls.name}.${nets.cls.epoch}.params'
            save: '${root_dir}/${exp_dir}/${data.func}/params/${nets.cls.type}.${nets.cls.name}.${epoch}.params'

    log: '${root_dir}/${exp_dir}/${data.func}/log/${model.type}.log'
    genout: '${root_dir}/${exp_dir}/${data.func}/gen/${model.type}.${net}.${net_epoch}.${data_desc}.${iter}.${ftype}'
    gen_freq: 1
    cmap: 'bwr'

    pattern:
        save: '${root_dir}/${exp_dir}/${data.func}/params/${net_type}.${net_name}.${pattern.name}.${fit_epoch}.${ase_epoch}.pattern.params'
        load: '${root_dir}/${exp_dir}/${data.func}/params/${net_type}.${net_name}.${pattern.name}.${pattern.start_epoch}.${pattern.aepoch}.pattern.params'
        output: '${root_dir}/${exp_dir}/${data.func}/rel/${pattern.type}/${model.type}.${net}.${net_epoch}.${pattern.name}.${pattern.start_epoch}.${data_desc}.${iter}.${ftype}'

    explanation:
        output: '${root_dir}/${exp_dir}/${data.func}/rel/${explanation.desc}/${model.type}.${net}.${net_epoch}.${data_desc}.${iter}.${ftype}'
tail:
    - #MNIST
        tag: 'mnist'
        dict:
            data: {func: 'mnist', kwargs: {pad: True}}
            nepochs: 100
            nets:
                gen: {epoch:  100, kwargs: {outnum:  1}}
                dis: {epoch:  100, kwargs: {outnum: 20}}
                cls: {epoch:   20, kwargs: {outnum: 10}}
        tail:
            &models
            - #GAN
                tag: 'gan'
                dict:
                    model:
                        type: 'CGAN'
                        kwargs:
                            generator:     'gen'
                            discriminator: 'dis'
                    nets:
                        gen: &generator
                            active: True
                            type:   'MYTCN32'
                            name:   'gen'
                            kwargs:
                                numhid: 64
                                use_bias: True
                                outact: 'tanh'
                                clip: [-1., 1.]
                            optimizer: 'adam'
                            optkwargs:
                                learning_rate: 0.00001 #0.00001
                        dis:
                            active: True
                            type:   'MSCN32'
                            name:   'dis'
                            kwargs:
                                numhid: 64
                                use_bias: True
                                leakage: 0.2
                            optimizer: 'adam'
                            optkwargs:
                                learning_rate: 0.00001 #0.00001
                        cls:
                            active: False
                tail:
                    - # Model Training
                        &training
                        tag: 'train'
                        dict:
                            init: True
                            data: {kwargs: {train: True}}
                        priority: 0
                        action: 'train'
                    - # Model Testing Generated
                        tag: 'test'
                        dict:
                            data: {kwargs: {train: False}}
                        priority: 1
                        action: 'test_gan'
                    - # Model Testing Discriminator on Data
                        tag: 'testdis'
                        dict:
                            data: {kwargs: {train: False}}
                            model:
                                type: 'Classifier'
                                kwargs:
                                    classifier: 'dis'
                            nets:
                                gen: {active: False}
                                dis: {active: True}
                                cls: {active: False}
                        priority: 1
                        action: 'test'
                    - # Fit PatternNet
                        &fitting
                        tag: 'fit'
                        dict:
                            data: {kwargs: {train: True}}
                            nets:
                                cls: {merge_batchnorm: True, kwargs: {droprate: 0.0}}
                                dis: {merge_batchnorm: True}
                                gen: {merge_batchnorm: True}
                            pattern:
                                start_epoch: 0
                                init: True
                                aepoch: 0
                                nepochs: 0
                                optimizer: 'adam'
                                optkwargs:
                                    learning_rate: 1.e-4
                                    wd: 0.1
                        tail:
                            -
                                tag: 'linear'
                                priority: 2
                                action: 'learn_pattern'
                                dict: &linear_pattern
                                    nets:
                                        gen: {kwargs: {patest: {relu: 'linear', out: 'linear'}}}
                                        dis: {kwargs: {patest: {relu: 'linear', out: 'linear'}}}
                                        cls: {kwargs: {patest: {relu: 'linear', out: 'linear'}}}
                                    pattern: {name: 'linear'}
                            -
                                tag: 'relu'
                                priority: 2
                                action: 'learn_pattern'
                                dict: &relu_pattern
                                    nets:
                                        gen: {kwargs: {patest: {relu: 'relu', out: 'linear'}}}
                                        dis: {kwargs: {patest: {relu: 'relu', out: 'linear'}}}
                                        cls: {kwargs: {patest: {relu: 'relu', out: 'linear'}}}
                                    pattern: {name: 'relu'}
                    - # Explaining GAN
                        &explaining
                        tag: 'explain'
                        dict:
                            data: {kwargs: {train: False}}
                            nets:
                                cls: {merge_batchnorm: True, kwargs: {droprate: 0.0}}
                                dis: {merge_batchnorm: True}
                                gen: {merge_batchnorm: True}
                        tail:
                            - # Layerwise
                                &layerwise
                                tag: 'layerwise'
                                tail:
                                    -
                                        tag: 'bias'
                                        priority: 3
                                        action: 'check_bias'
                                    -
                                        tag: 'lrp'
                                        dict:
                                            nets:
                                                cls: {kwargs: {outact: 'relu', leakage: 0.0, explain: {relu: 'alphabeta'}}}
                                                dis: {kwargs: {outact: 'relu', leakage: 0.2, explain: {relu: 'alphabeta'}}}
                                                gen: {kwargs: {                              explain: {relu: 'alphabeta'}}}
                                            explanation:
                                                desc: 'lrp'
                                                kwargs:
                                                    method: 'layerwise'
                                                    use_bias: True
                                                    alpha: 2.0
                                                    beta:  1.0
                                        priority: 3
                                        action: 'explain'
                                    -
                                        tag: 'dtd'
                                        dict:
                                            nets:
                                                cls: {kwargs: {outact: 'relu', leakage: 0.0, explain: {relu: 'zplus'}}}
                                                dis: {kwargs: {outact: 'relu', leakage: 0.2, explain: {relu: 'zclip'}}}
                                                gen: {kwargs: {                              explain: {relu: 'zplus'}}}
                                            explanation:
                                                desc: 'dtd'
                                                kwargs:
                                                    method: 'layerwise'
                                                    use_bias: True
                                                    lo: -1.0
                                                    hi: 1.0
                                        priority: 3
                                        action: 'explain'
                            - # GradBased
                                &gradbased
                                dict:
                                    data: {kwargs: {train: False}}
                                tail:
                                    -
                                        tag: 'sensitivity'
                                        dict:
                                            explanation:
                                                desc: 'sensitivity'
                                                kwargs:
                                                    method: 'sensitivity'
                                        priority: 3
                                        action: 'explain'
                                    -
                                        tag: 'intgrads'
                                        dict:
                                            explanation:
                                                desc: 'intgrads'
                                                kwargs:
                                                    method: 'intgrads'
                                                    num: 1000
                                        priority: 3
                                        action: 'explain'
                            - # PatternNet
                                &patternnet
                                tag: 'pattern'
                                dict:
                                    pattern:
                                        init: False
                                        aepoch: 0
                                tail:
                                    -
                                        tag: 'linear'
                                        dict: *linear_pattern
                                        tail: &explain_epochs
                                            -
                                                dict:
                                                    pattern: {start_epoch: 0}
                                                tail: &explain_types
                                                    -
                                                        tag: 'patternnet'
                                                        dict: {pattern: {type: 'pattern'}}
                                                        priority: 3
                                                        action: 'explain_pattern'
                                                    -
                                                        tag: 'attribution'
                                                        dict: {pattern: {type: 'attribution'}}
                                                        priority: 3
                                                        action: 'explain_pattern'
                                    -
                                        tag: 'relu'
                                        dict: *relu_pattern
                                        tail: *explain_epochs
                    - # Explaining Discriminator
                        tag: 'dis'
                        dict:
                            model:
                                type: 'Classifier'
                                kwargs:
                                    classifier: 'dis'
                            nets:
                                gen: {active: False}
                                dis: {active: True}
                                cls: {active: False}
                        tail:
                            - *explaining
            - # Classifier
                tag: 'classifier'
                dict: &classifier
                    model:
                        type: 'Classifier'
                        kwargs:
                            classifier: 'cls'
                    nets:
                        gen: {active: False}
                        dis: {active: False}
                        cls: {active: True}
                tail:
                    - # MSCN32
                        tag: 'fcnn'
                        dict:
                            nepochs: 20
                            nets:
                                cls:
                                    type: 'MSCN32'
                                    name: 'fcnn'
                                    epoch:  20
                                    kwargs:
                                        outnum: 10
                                        numhid: 64
                                        leakage: 0.0
                                        use_bias: True
                                    optimizer: 'adam'
                                    optkwargs:
                                        learning_rate: 0.001
                        tail:
                            &clsactions
                            - # Model Training
                                *training
                            - # Model Testing
                                tag: 'test'
                                dict:
                                    data: {kwargs: {train: False}}
                                    nets: {cls: {kwargs: {droprate: 0.0}}}
                                tail:
                                    -
                                        tag: 'tstcls'
                                        priority: 1
                                        action: 'test'
                                    -
                                        tag: 'tstgan'
                                        priority: 1
                                        dict:
                                            model:
                                                type: 'CGAN'
                                                kwargs:
                                                    discriminator: 'cls'
                                                    generator:     'gen'
                                            nets:
                                                gen: *generator
                                                dis: {active: False}
                                                cls: {active: True}
                                        action: 'test_gan'
                            - # Fit PatternNet
                                *fitting
                            - # Explaining Classifiers
                                *explaining
                            - # Explaining GANs
                                tag: 'clsgan'
                                dict:
                                    model:
                                        type: 'CGAN'
                                        kwargs:
                                            discriminator: 'cls'
                                            generator:     'gen'
                                    nets:
                                        gen: *generator
                                        dis: {active: False}
                                        cls: {active: True}
                                tail:
                                    - *explaining
                    - # cnn_2convb_2dense
                        tag: 'cnn'
                        dict:
                            nepochs: 20
                            nets:
                                cls:
                                    type: 'cnn_2convb_2dense'
                                    name: 'cnn'
                                    epoch:  20
                                    kwargs:
                                        outnum: 10
                                        numhid: 512
                                        use_bias: True
                                        droprate: 0.25
                                    optimizer: 'adam'
                                    optkwargs:
                                        learning_rate: 0.001
                        tail:
                            *clsactions
                    - # mlp_3dense
                        tag: 'mlp'
                        dict:
                            nepochs: 20
                            nets:
                                cls:
                                    type: 'mlp_3dense'
                                    name: 'mlp'
                                    epoch:  20
                                    kwargs:
                                        outnum: 10
                                        numhid: 1024
                                        use_bias: True
                                        droprate: 0.25
                                    optimizer: 'adam'
                                    optkwargs:
                                        learning_rate: 0.001
                        tail:
                            *clsactions
    - #CIFAR10
        tag: 'cifar10'
        dict:
            data: {func: 'cifar10', kwargs:{grey: False}}
            nepochs: 400
            nets:
                gen: {type: 'MYTCN32', epoch:  400, kwargs: {outnum:  3}, optkwargs: {learning_rate: 1.e-4}}
                dis: {type: 'MSCN32' , epoch:  400, kwargs: {outnum: 20}, optkwargs: {learning_rate: 1.e-4}}
                cls: {type:  NULL    , epoch: NULL, kwargs: {outnum: 10}}
        tail:
            *models
    - #toydata
        tag: 'toydata'
        dict:
            data: {func: 'toydata'}
            nepochs: 10
            nets:
                gen: {type: 'MYTCN32', epoch:   10, kwargs: {outnum:  1}}
                dis: {type: 'MSCN32' , epoch:   10, kwargs: {outnum: 20}}
                cls: {type:  NULL    , epoch: NULL, kwargs: {outnum: 10}}
        tail:
            *models
