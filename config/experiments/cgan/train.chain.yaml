fname: '/home/chrstphr/projects/ecGAN/result/cgan/CGAN.yaml'
tail:
    - #Model Training
        &training
        dict:
            init: True
            data: {kwargs: {train: True}}
        priority: 0
        action: 'train'
    - #Model Testing
        dict:
            data: {kwargs: {train: False}}
        priority: 1
        action: 'test_gan'
    - #Model Testing (BatchNormMerge successful?)
        dict:
            data: {kwargs: {train: False}}
            nets:
                generator:     {merge_batchnorm: True}
                discriminator: {merge_batchnorm: True}
                classifier:    {merge_batchnorm: True}
        priority: 1
        action: 'test_gan'
    - # Fit PatternNet
        &fitting
        dict:
            data: {kwargs: {train: True}}
            pattern:
                start_epoch: 0
                init: True
                aepoch: 0
                nepochs: 10
                optimizer: 'adam'
                optkwargs:
                    learning_rate: 0.0001
                    wd: 0.99
        tail:
            -
                priority: 2
                action: 'fit_pattern'
                dict: &linear_pattern
                    nets:
                        generator:     {kwargs: {patest: {relu: 'linear', clip: 'linear', pixel: 'linear', gauss: 'linear'}}}
                        discriminator: {kwargs: {patest: {relu: 'linear', clip: 'linear', pixel: 'linear', gauss: 'linear'}}}
                        classifier:    {kwargs: {patest: {relu: 'linear', clip: 'linear', pixel: 'linear', gauss: 'linear'}}}
                    pattern: {name: 'linear'}
            -
                priority: 2
                action: 'fit_pattern'
                dict: &relu_pattern
                    nets:
                        generator:     {kwargs: {patest: {relu: 'relu', clip: 'clip', pixel: 'relu', gauss: 'relu'}}}
                        discriminator: {kwargs: {patest: {relu: 'relu', clip: 'clip', pixel: 'relu', gauss: 'relu'}}}
                        classifier:    {kwargs: {patest: {relu: 'relu', clip: 'clip', pixel: 'relu', gauss: 'relu'}}}
                    pattern: {name: 'relu'}
#    - # Assess PatternNet Quality
#        &assessing
#        dict: &ase_dict
#            start_epoch: 10
#            data: {kwargs: {train: False}}
#            pattern:
#                init: False
#                start_epoch: 10
#                aepoch: 0
#        tail:
#            -
#                dict: *linear_pattern
#                tail: &ase_epochs
#                    -
#                        dict:
#                            pattern: {start_epoch: 5}
#                        tail: &small_assess
#                            -
#                                priority: 3
#                                action: 'stats_assess_pattern'
#                            -
#                                priority: 4
#                                action: 'fit_assess_pattern'
#                            -
#                                priority: 5
#                                dict:
#                                    pattern: {aepoch: 10}
#                                action: 'assess_pattern'
#                    -
#                        dict:
#                            pattern: {start_epoch: 10}
#                        tail: *small_assess
#            -
#                dict: *relu_pattern
#                tail: *ase_epochs
    - # Classifier
        dict: &classifier_mod
            model: 'Classifier'
            nets:
                generator:     {active: False}
                discriminator: {active: False}
                classifier:    {active: True}
        tail:
            - # Model Training
                dict:
                    init: True
                    nepochs: 10
                    data: {kwargs: {train: True}}
                priority: 0
                action: 'train'
            - # Model Testing
                dict:
                    data: {kwargs: {train: False}}
                priority: 1
                action: 'test'
            - # Model Testing (BatchNorm Check)
                dict:
                    data: {kwargs: {train: False}}
                    nets:
                        generator:     {top: 'classifier', merge_batchnorm: True}
                        discriminator: {active: False, merge_batchnorm: True}
                        classifier:    {active: True, merge_batchnorm: True}
                priority: 1
                action: 'test'
            - # Fit PatternNet
                *fitting
#            - # Assess PatternNet Quality
#                *assessing
    - #Model Testing
        dict:
            data: {kwargs: {train: False}}
            nets:
                generator:     {top: 'classifier'}
                discriminator: {active: False}
                classifier:    {active: True}
        priority: 1
        action: 'test_gan'
    - #Model Testing (BatchNormMerged)
        dict:
            data: {kwargs: {train: False}}
            nets:
                generator:     {top: 'classifier', merge_batchnorm: True}
                discriminator: {active: False, merge_batchnorm: True}
                classifier:    {active: True, merge_batchnorm: True}
        priority: 1
        action: 'test_gan'
